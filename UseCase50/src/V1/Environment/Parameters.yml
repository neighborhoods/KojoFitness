parameters:
# Redis.
  neighborhoods.kojo.environment.parameters.redis_port: '%env(KOJO_REDIS_PORT)%'
  neighborhoods.kojo.environment.parameters.redis_host: '%env(KOJO_REDIS_HOST)%'
# DB
  neighborhoods.kojo.environment.parameters.database_user_name: '%env(DATABASE_USERNAME)%'
  neighborhoods.kojo.environment.parameters.database_password: '%env(DATABASE_PASSWORD)%'
  neighborhoods.kojo.environment.parameters.database_adapter: '%env(DATABASE_ADAPTER)%'
  neighborhoods.kojo.environment.parameters.database_host: '%env(DATABASE_HOST)%'
  neighborhoods.kojo.environment.parameters.database_name: '%env(DATABASE_NAME)%'

  neighborhoods.kojo.process.pool.logger.level_filter_mask:
    !php/const \Psr\Log\LogLevel::EMERGENCY: false
    !php/const \Psr\Log\LogLevel::ALERT: false
    !php/const \Psr\Log\LogLevel::CRITICAL: false
    !php/const \Psr\Log\LogLevel::ERROR: false
    !php/const \Psr\Log\LogLevel::WARNING: false
    !php/const \Psr\Log\LogLevel::NOTICE: false
    !php/const \Psr\Log\LogLevel::INFO: false
    !php/const \Psr\Log\LogLevel::DEBUG: false

  # logging overrides

  # explicitly use the default of 'warning'
  neighborhoods.kojo.environment.parameters.kojospace_logging_levels.disabled_job_type: !php/const \Psr\Log\LogLevel::WARNING

  # use a lower logging level than the default of 'warning'
  # neighborhoods.kojo.environment.parameters.kojospace_logging_levels.disabled_job_type: !php/const \Psr\Log\LogLevel::DEBUG

  # try using a non-existent logging level (kojo spins, trying to start workers, but running into an exception each time)
  # neighborhoods.kojo.environment.parameters.kojospace_logging_levels.disabled_job_type: 'nonexistent'

  # try making the logging level null (kojo itself crashes from the type error)
  # neighborhoods.kojo.environment.parameters.kojospace_logging_levels.disabled_job_type: null
